@page "/settings/pruebas"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@layout SettingsLayout

<PageTitle>Configuración de Cuenta</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <!-- Header con breadcrumb -->
    <MudBreadcrumbs Items="_breadcrumbItems" Class="mb-4" />

    <MudText Typo="Typo.h4" Class="mb-2">Mi Perfil</MudText>
    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-6">
        Administra tu información personal y configuración de cuenta
    </MudText>

    <!-- Card principal del perfil -->
    <MudCard Class="mb-6" Elevation="2">
        <MudCardContent>
            <!-- Sección de Avatar - Responsiva -->
            <MudGrid AlignItems="Center" Class="mb-4">
                <MudItem xs="12" sm="3" md="2" Class="d-flex justify-center justify-sm-start">
                    <MudBadge Origin="Origin.BottomRight"
                              Icon="@Icons.Material.Filled.CameraAlt"
                              Color="Color.Primary"
                              Overlap="true"
                              Class="cursor-pointer"
                              @onclick="OpenImageUpload">
                        <MudAvatar Size="Size.Large"
                                   Style="height:80px; width:80px;"
                                   Class="mud-elevation-4">
                            <MudImage Src="https://picsum.photos/200" Alt="Foto de perfil" />
                        </MudAvatar>
                    </MudBadge>
                </MudItem>

                <MudItem xs="12" sm="9" md="10">
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.h6">@AccountModel.Username</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@AccountModel.Email</MudText>

                        <!-- Botones de imagen - Stack responsivo -->
                        <MudStack Row="@(!_isMobile)" Spacing="2" Class="mt-2">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Upload"
                                       Size="Size.Small"
                                       OnClick="OpenImageUpload">
                                Cambiar foto
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="RemoveImage">
                                Eliminar
                            </MudButton>
                        </MudStack>

                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" />
                            Formatos: PNG, JPEG. Tamaño máximo: 2MB
                        </MudText>
                    </MudStack>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            <!-- Formulario de edición -->
            <EditForm Model="@AccountModel" OnValidSubmit="GuardarCambios">
                <DataAnnotationsValidator />

                <MudGrid Spacing="3">
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="AccountModel.Username"
                                      Disabled="!IsEditing"
                                      Label="Nombre de usuario"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Person"
                                      HelperText="Este será tu nombre visible"
                                      For="@(() => AccountModel.Username)" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="AccountModel.Email"
                                      Disabled="!IsEditing"
                                      Label="Correo electrónico"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Email"
                                      HelperText="Usado para notificaciones y acceso"
                                      For="@(() => AccountModel.Email)" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="AccountModel.Password"
                                      Disabled="!IsEditing"
                                      Label="Contraseña"
                                      InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="TogglePasswordVisibility"
                                      HelperText="Mínimo 8 caracteres"
                                      For="@(() => AccountModel.Password)" />
                    </MudItem>

                    <!-- Botones de acción -->
                    <MudItem xs="12">
                        <MudStack Row="@(!_isMobile)" Spacing="2" Class="mt-4">
                            <MudButton Variant="Variant.Filled"
                                       Color="@(IsEditing ? Color.Success : Color.Primary)"
                                       StartIcon="@(IsEditing ? Icons.Material.Filled.Save : Icons.Material.Filled.Edit)"
                                       OnClick="ToggleEditing"
                                       Loading="@_isLoading">
                                @(IsEditing ? "Guardar cambios" : "Editar perfil")
                            </MudButton>

                            @if (IsEditing)
                            {
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.Cancel"
                                           OnClick="CancelarEdicion">
                                    Cancelar
                                </MudButton>
                            }
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCardContent>
    </MudCard>

    <!-- Sección de Seguridad -->
    <MudCard Class="mb-6" Elevation="2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.Security" Class="mr-2" />
                    Seguridad y Acceso
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Spacing="4">
                <!-- Cambiar contraseña -->
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Outlined="true">
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.subtitle1">
                                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" Class="mr-2" />
                                Cambiar contraseña
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Actualiza tu contraseña regularmente para mayor seguridad
                            </MudText>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.VpnKey"
                                       OnClick="OpenChangePasswordDialog">
                                Cambiar contraseña
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Autenticación de dos factores -->
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Outlined="true">
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.subtitle1">
                                <MudIcon Icon="@Icons.Material.Filled.Shield" Size="Size.Small" Class="mr-2" />
                                Autenticación 2FA
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Añade una capa extra de seguridad a tu cuenta
                            </MudText>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.PhonelinkSetup">
                                Configurar 2FA
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Zona de peligro -->
    <MudCard Elevation="2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6" Color="Color.Error">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
                    Zona de Peligro
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid Spacing="4">
                <!-- Cerrar sesión -->
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Outlined="true" Style="border-color: var(--mud-palette-warning);">
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.subtitle1">
                                <MudIcon Icon="@Icons.Material.Filled.Logout" Size="Size.Small" Class="mr-2" />
                                Cerrar sesión
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Cierra tu sesión en este dispositivo
                            </MudText>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Warning"
                                       StartIcon="@Icons.Material.Filled.ExitToApp"
                                       OnClick="CerrarSesion">
                                Cerrar sesión
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudItem>

                <!-- Eliminar cuenta -->
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-4" Outlined="true" Style="border-color: var(--mud-palette-error);">
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.subtitle1" Color="Color.Error">
                                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Class="mr-2" />
                                Eliminar cuenta
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Esta acción no se puede deshacer
                            </MudText>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="ConfirmarEliminarCuenta">
                                Eliminar cuenta
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private UserAccountModel AccountModel { get; set; } = new()
        {
            Username = "Juan Pérez",
            Email = "juan.perez@ejemplo.com",
            Password = "••••••••••••"
        };

    private UserAccountModel OriginalModel = new();
    private bool IsEditing { get; set; } = false;
    private bool _showPassword = false;
    private bool _isLoading = false;
    private bool _isMobile = false;

    private List<BreadcrumbItem> _breadcrumbItems = new()
    {
        new BreadcrumbItem("Inicio", href: "/"),
        new BreadcrumbItem("Configuración", href: "/settings"),
        new BreadcrumbItem("Cuenta", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        // Detectar si es móvil (simplificado)
        _isMobile = false; // Aquí podrías usar JS interop para detectar el tamaño de pantalla
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private async Task ToggleEditing()
    {
        if (IsEditing)
        {
            await GuardarCambios();
        }
        else
        {
            OriginalModel = new UserAccountModel
                {
                    Username = AccountModel.Username,
                    Email = AccountModel.Email,
                    Password = AccountModel.Password
                };
        }

        IsEditing = !IsEditing;
    }

    private void CancelarEdicion()
    {
        AccountModel.Username = OriginalModel.Username;
        AccountModel.Email = OriginalModel.Email;
        AccountModel.Password = OriginalModel.Password;
        IsEditing = false;
    }

    private async Task GuardarCambios()
    {
        _isLoading = true;

        // Simular llamada a API
        await Task.Delay(1000);

        Snackbar.Add("Perfil actualizado correctamente", Severity.Success);
        _isLoading = false;
    }

    private async Task OpenImageUpload()
    {
        // Implementar lógica de subida de imagen
        Snackbar.Add("Funcionalidad de subida de imagen", Severity.Info);
    }

    private async Task RemoveImage()
    {
        var result = await DialogService.ShowMessageBox(
            "Confirmar eliminación",
            "¿Estás seguro de que quieres eliminar tu foto de perfil?",
            yesText: "Eliminar", cancelText: "Cancelar");

        if (result == true)
        {
            Snackbar.Add("Foto de perfil eliminada", Severity.Success);
        }
    }

    private async Task OpenChangePasswordDialog()
    {
        // Abrir diálogo para cambiar contraseña
        Snackbar.Add("Abrir diálogo de cambio de contraseña", Severity.Info);
    }

    private async Task CerrarSesion()
    {
        var result = await DialogService.ShowMessageBox(
            "Cerrar sesión",
            "¿Estás seguro de que quieres cerrar tu sesión?",
            yesText: "Cerrar sesión", cancelText: "Cancelar");

        if (result == true)
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
    }

    private async Task ConfirmarEliminarCuenta()
    {
        var result = await DialogService.ShowMessageBox(
            "⚠️ Eliminar cuenta",
            "Esta acción eliminará permanentemente tu cuenta y todos tus datos. Esta acción no se puede deshacer. ¿Estás completamente seguro?",
            yesText: "Sí, eliminar mi cuenta", cancelText: "Cancelar");

        if (result == true)
        {
            // Mostrar segundo diálogo de confirmación
            var finalConfirm = await DialogService.ShowMessageBox(
                "Confirmación final",
                "Escribe 'ELIMINAR' para confirmar la eliminación de tu cuenta:",
                yesText: "Confirmar", cancelText: "Cancelar");

            if (finalConfirm == true)
            {
                Snackbar.Add("Cuenta eliminada (simulado)", Severity.Error);
            }
        }
    }

    public class UserAccountModel
    {
        [Required(ErrorMessage = "El nombre de usuario es requerido")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "El nombre debe tener entre 3 y 50 caracteres")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "Formato de correo inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "La contraseña debe tener al menos 8 caracteres")]
        public string Password { get; set; } = string.Empty;
    }
}