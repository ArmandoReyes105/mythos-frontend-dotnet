@page "/pruebas"

<PageTitle>Página de pruebas</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <!-- Header with Back Button -->
    <MudStack Row AlignItems="AlignItems.Center" Class="mb-6">
        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Text" Color="Color.Primary"
            OnClick="@GoBack" Class="pa-2">
            Volver
        </MudButton>
    </MudStack>

    <!-- Main Content Card -->
    <MudCard Elevation="2" Class="pa-6">
        <MudCardContent>
            <!-- Title Section -->
            <MudStack AlignItems="AlignItems.Center" Class="mb-6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Large" Class="mb-2" />
                <MudText Typo="Typo.h4" Color="Color.Primary" Class="text-center font-weight-bold">
                    Conviértete en Autor
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                    Completa tu perfil para comenzar a escribir en nuestra plataforma
                </MudText>
            </MudStack>

            <!-- Form -->
            <EditForm Model="@personModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <MudGrid>
                    <!-- Name and Last Name -->
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="personModel.Name" Label="Nombre" Variant="Variant.Outlined"
                            Margin="Margin.Normal" Required="true" RequiredError="El nombre es requerido" Counter="50"
                            MaxLength="50" HelperText="Mínimo 2 caracteres" Immediate="true" Class="mb-4" />
                        <ValidationMessage For="@(() => personModel.Name)" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="personModel.LastName" Label="Apellido" Variant="Variant.Outlined"
                            Margin="Margin.Normal" Required="true" RequiredError="El apellido es requerido" Counter="50"
                            MaxLength="50" HelperText="Mínimo 2 caracteres" Immediate="true" Class="mb-4" />
                        <ValidationMessage For="@(() => personModel.LastName)" />
                    </MudItem>

                    <!-- Birth Date -->
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Fecha de Nacimiento" Variant="Variant.Outlined" Margin="Margin.Normal"
                            Required="true" HelperText="Debes tener al menos 16 años" Class="mb-4" />
                        <ValidationMessage For="@(() => personModel.BirthDate)" />
                    </MudItem>

                    <!-- Country -->
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="personModel.Country" Label="País" Variant="Variant.Outlined"
                            Margin="Margin.Normal" Required="true" RequiredError="El país es requerido"
                            HelperText="Selecciona tu país de residencia" Class="mb-4">
                            @foreach (var country in countries)
                            {
                                <MudSelectItem Value="@country">@country</MudSelectItem>
                            }
                        </MudSelect>
                        <ValidationMessage For="@(() => personModel.Country)" />
                    </MudItem>

                    <!-- Biography -->
                    <MudItem xs="12">
                        <MudTextField @bind-Value="personModel.Biography" Label="Biografía" Variant="Variant.Outlined"
                            Margin="Margin.Normal" Lines="6" Required="true" RequiredError="La biografía es requerida"
                            Counter="1000" MaxLength="1000"
                            HelperText="Cuéntanos sobre ti, tu experiencia y por qué quieres ser escritor (mínimo 50 caracteres)"
                            Immediate="true" Class="mb-6" />
                        <ValidationMessage For="@(() => personModel.Biography)" />
                    </MudItem>

                    <!-- Submit Button -->
                    <MudItem xs="12" Class="d-flex justify-center">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                            Size="Size.Large" StartIcon="@Icons.Material.Filled.Send"
                            Disabled="@(!IsFormValid() || isSubmitting)" Class="px-8 py-3">
                            @if (isSubmitting)
                            {
                                <div>
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                                    Enviando
                                </div>
                            }
                            else
                            {
                                <div>
                                    EnviarSolicitud
                                </div>
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private PersonModel personModel = new();
    private bool isSubmitting = false;

    private readonly List<string> countries = new()
{
"Argentina", "Bolivia", "Brasil", "Chile", "Colombia", "Costa Rica",
"Cuba", "Ecuador", "El Salvador", "España", "Guatemala", "Honduras",
"México", "Nicaragua", "Panamá", "Paraguay", "Perú", "Puerto Rico",
"República Dominicana", "Uruguay", "Venezuela", "Estados Unidos",
"Canadá", "Reino Unido", "Francia", "Alemania", "Italia", "Portugal"
};

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(personModel.Name) &&
        personModel.Name.Length >= 2 &&
        !string.IsNullOrWhiteSpace(personModel.LastName) &&
        personModel.LastName.Length >= 2 &&
        personModel.BirthDate != default &&
        personModel.BirthDate <= DateTime.Today.AddYears(-13) &&
        !string.IsNullOrWhiteSpace(personModel.Country) &&
        !string.IsNullOrWhiteSpace(personModel.Biography) &&
        personModel.Biography.Length >= 50;
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            await BecomeWriterAsync(personModel);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task BecomeWriterAsync(PersonModel model)
    {
        try
        {
            //var response = await Http.PostAsJsonAsync("/account/become-writer", model);

            if (true)
            {
                //Snackbar.Add("¡Solicitud enviada exitosamente! Te contactaremos pronto.", Severity.Success);
                // Optionally navigate to a success page or clear the form
                await Task.Delay(2000);
                //Navigation.NavigateTo("/");
            }
            else
            {
                //var errorMessage = await response.Content.ReadAsStringAsync();
                //Snackbar.Add($"Error al enviar la solicitud: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            //Snackbar.Add($"Error de conexión: {ex.Message}", Severity.Error);
        }
    }

    private void GoBack()
    {
        //Navigation.NavigateTo("/");
    }
}