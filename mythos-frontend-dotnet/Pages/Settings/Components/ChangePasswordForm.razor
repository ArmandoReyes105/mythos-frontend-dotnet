@inject IAccountService AccountService
@inject ISnackbar SnackBar
@inject NavigationManager NavigationManager

<EditForm Model="@PasswordModel" OnValidSubmit="@ToggleEditing">
    <DataAnnotationsValidator />

    <MudGrid Spacing="3">
        <MudItem xs="12">
            <MudTextField @bind-Value="PasswordModel.NewPassword"
            Disabled="!_isEditing"
            Label="Contraseña"
            InputType="@(_showPassword ? InputType.Text : InputType.Password)"
            Variant="Variant.Outlined"
            Adornment="Adornment.End"
            Placeholder="Ingresa tu nueva contraseña"
            AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
            OnAdornmentClick="@TogglePasswordVisibility"
            HelperText="@(_isEditing ? "Ingresa tu nueva contraseña" : "Mínimo 8 caracteres")"
            For="@(() => PasswordModel.NewPassword)" />
        </MudItem>

        <MudItem xs="12">
            <MudStack Row Spacing="2">
                <MudButton Variant="Variant.Filled"
                Color="Color.Dark"
                ButtonType="ButtonType.Submit">
                    @(_isEditing ? "Guardar" : "Cambiar contraseña")
                </MudButton>

                @if (_isEditing)
                {
                    <MudButton Variant="Variant.Outlined"
                    Color="Color.Dark"
                    OnClick="@CancelEdition">Cancelar</MudButton>
                }
            </MudStack>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private bool _showPassword = false;
    private bool _isEditing = false;

    private ChangePasswordModel PasswordModel = new()
    {
        NewPassword = "********"
    }; 

    private async void ToggleEditing()
    {
        if (_isEditing)
        {
            await SaveChanges();
        }
        else
        {
            PasswordModel.NewPassword = string.Empty; 
        }

        _isEditing = !_isEditing;
    }

    private void CancelEdition()
    {
        PasswordModel.NewPassword = "********"; 
        _isEditing = false;
    }

    private async Task SaveChanges()
    {
        try
        {
            var result = await AccountService.ChangePasswordAsync(PasswordModel);

            if (result)
                SnackBar.Add("Tu contraseña se actualizó correctamente.", Severity.Success);
            else
                SnackBar.Add($"Lo sentimos, ocurrio un error al intentar cambiar tu contraseña, por favor intentalo mas tarde.", Severity.Error);
        }
        catch (UnauthorizedAccessException)
        {
            SnackBar.Add("No tienes permiso para cambiar esta contraseña.", Severity.Warning);
        }
        catch (HttpRequestException)
        {
            SnackBar.Add("Lo sentimos, ocurrio un error al conectarse con el servidor, por favor intentalo más tarde", Severity.Error);
        }
        catch (Exception)
        {
            SnackBar.Add("Lo sentimos, ocurrio un error inesperado, por favor intentalo más tarde", Severity.Error);
        }

    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
}
