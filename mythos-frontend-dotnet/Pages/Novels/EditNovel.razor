@inject ISnackbar Snackbar
@inject MythosAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject INovelService NovelService

@attribute [Authorize(Roles = "writer")]

@page "/edit-novel/{NovelId}"
@using mythos_frontend_dotnet.Services.Interfaces

<PageTitle>Crear Novela</PageTitle>

<MudContainer Class="pa-4" MaxWidth="MaxWidth.Large">
    <IconBackButton />

    <MudContainer MaxWidth="MaxWidth.Medium">

        <MudGrid Class="mt-3">
            <MudItem xs="12" md="5">
                <MudImage ObjectFit="ObjectFit.Cover" Src="@(imagePreviewUrl ?? "https://picsum.photos/200")"
                    Alt="Previsualización de portada" Elevation="3" Class="rounded-lg" Style="max-width: 400px; width: 100%; aspect-ratio: 4/5;" />
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="@UploadFile" MaximumFileCount="1">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Dark"
                            StartIcon="@Icons.Material.Filled.CloudUpload">
                            Subir imagen
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>

            <MudItem xs="12" md="7">

                <MudStack Class="mb-4" Spacing="1">
                    <MudText Typo="Typo.h5">Publica tu novela</MudText>
                    <MudText Typo="Typo.body2">
                        Da vida a tu historia. Completa los campos del formulario y compártela con los lectores de
                        Mythos.
                    </MudText>
                </MudStack>

                <EditForm OnSubmit="@HandleSubmit" EditContext="@editContext">
                    <DataAnnotationsValidator />
                    <MudTextField @bind-Value="novelModel.Title" Label="Titulo" Required="true" Class="mb-4"
                        Variant="Variant.Outlined" For="@(() => novelModel.Title)" Margin="Margin.Dense" />

                    <MudTextField @bind-Value="novelModel.Description" Label="Descripción" Variant="Variant.Outlined"
                        Margin="Margin.Dense" Lines="4" Required="true" Counter="1000" MaxLength="1000"
                        HelperText="Cuéntanos un poco sobre tu novela." Immediate="true" Class="mb-6"
                        For="@(() => novelModel.Description)" />

                    <MudDivider Class="mb-4" />

                    <!--Genres select-->
                    <MudSelect T="string" Label="Géneros" Variant="Variant.Outlined"
                        Margin="Margin.Dense" Value="@($"{novelModel.Genres.Count} géneros seleccionados")" ValueChanged="@(value => novelModel.Genres.Add(value))">
                        @foreach (var genre in AVAILABLE_GENRES)
                        {
                            <MudSelectItem T=" string" Value="@genre">@genre</MudSelectItem>
                        }
                    </MudSelect>
                    
                    <MudStack Row Wrap="Wrap.Wrap" Spacing="1">
                        @foreach (var genre in novelModel.Genres)
                        {
                            <MudChip T="string" Color="Color.Default" Size="Size.Small" Value="@genre" OnClose="@((args) => novelModel.Genres.Remove(args.Value!))">@genre</MudChip>
                        }
                    </MudStack>


                    <!--Tags select-->
                    <MudSelect T="string" Label="Tags" Variant="Variant.Outlined"
                        Margin="Margin.Dense" Value="@($"{novelModel.Tags.Count} tags seleccionados")" ValueChanged="@((value) => novelModel.Tags.Add(value))">
                        @foreach (var tag in AVAILABLE_TAGS)
                        {
                            <MudSelectItem T="string" Value="@tag">@tag</MudSelectItem>
                        }
                    </MudSelect>

                    <MudStack Row Wrap="Wrap.Wrap" Spacing="1">
                        @foreach (var tag in novelModel.Tags)
                        {
                            <MudChip T="string" Color="Color.Default" Size="Size.Small" Value="@tag" OnClose="@((args) => novelModel.Tags.Remove(args.Value!))">@tag</MudChip>
                        }
                    </MudStack>

                    <MudButton Disabled="@isProcessing" Variant="Variant.Filled" Color="Color.Dark" FullWidth
                        ButtonType="ButtonType.Submit" Class="mt-3" EndIcon="@Icons.Material.Rounded.Send">
                        @if (isProcessing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Enviando ...</MudText>
                        }
                        else
                        {
                            <MudText>Actualizar novela</MudText>
                        }
                    </MudButton>
                </EditForm>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudContainer>

@code {
    [Parameter] public string NovelId { get; set; } = string.Empty;
    private readonly List<string> AVAILABLE_GENRES = new()
{
"Acción", "Aventura", "Romance", "Terror", "Drama", "Fantasía", "Fantasía oscura",
"Ciencia ficción", "Comedia", "Misterio", "Misterio sobrenatural", "Cultivo", "Superheroes"
};

    private readonly List<string> AVAILABLE_TAGS = new()
{
"Horror cósmico", "Ocultismo", "Sistema de pociones", "Protagonista inteligente", "Sociedades secretas",
"Mundo detallado", "Conspiraciones", "Locura", "Terror psicológico", "Progresión de poder", "Dimensiones",
"Sistema genético", "Cultivo moderno", "Torneos", "Tecnología avanzada", "Batallas épicas", "Mundo cruel",
"Ascenso imparable", "Bucle temporal", "Anti héroe", "Superpoderes", "Optimización", "Distopía",
"Narrativa tipo juego", "Humor negro", "Protagonista sarcastico", "Megacorporaciones"
};
    private EditContext? editContext;
    private bool isProcessing = false;
    private IBrowserFile? coverImage = null;
    private string? imagePreviewUrl;
    private CreateNovelModel novelModel = new();
    private CreateNovelModel _originalModel = new(); 

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(novelModel);
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            var result = await NovelService.GetNovelByIdAsync(NovelId);

            if (result is null)
            {
                Snackbar.Add("Lo sentimos ocurrio un error al recuperar la novela, por favor intentelo más tarde", Severity.Error);
                NavigationManager.NavigateTo("/settings/publications");
            }
            else
            {
                imagePreviewUrl = result.CoverImageUrl;

                novelModel.WriterAccountId = result.WriterAccountId; 
                novelModel.Title = result.Title;
                novelModel.Description = result.Description;
                novelModel.CoverImageUrl = result.CoverImageUrl; 
                novelModel.Tags = result.Tags;
                novelModel.Genres = result.Genres;

                _originalModel = new CreateNovelModel
                {
                    Title = result.Title,
                    Description = result.Description,
                    Tags = new List<string>(result.Tags),
                    Genres = new List<string>(result.Genres),
                    CoverImageUrl = result.CoverImageUrl
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error recuperar la novela: " + ex.Message);
            Snackbar.Add("Lo sentimos, ocurrio un error con el servidor, por favor intentelo más tarde", Severity.Error);
            NavigationManager.NavigateTo("/settings/publications");
        }
    }

    private async Task UploadFile(IBrowserFile image)
    {
        long maxAllowedSize = 10 * 1024 * 1024; // 10 MB

        if (image == null)
            return;

        if (image.Size > maxAllowedSize)
        {
            Snackbar.Add("El archivo es demasiado grande, máximo 10MB", Severity.Error);
            return;
        }

        coverImage = image;

        try
        {
            using var stream = image.OpenReadStream(maxAllowedSize);
            var buffer = new byte[image.Size];
            int bytesRead = 0;
            while (bytesRead < image.Size)
            {
                int read = await stream.ReadAsync(buffer, bytesRead, (int)image.Size - bytesRead);
                if (read == 0) break; // fin del stream
                bytesRead += read;
            }
            var base64 = Convert.ToBase64String(buffer);
            imagePreviewUrl = $"data:{image.ContentType};base64,{base64}";
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al leer la imagen: {ex.Message}", Severity.Error);
        }
    }

    public async Task HandleSubmit()
    {
        isProcessing = true;

        if (isModelCorrect())
        {
            await UpdateNovelAsync();
        }

        isProcessing = false;
    }

    public async Task UpdateNovelAsync()
    {
        try
        {
            var id = await AuthStateProvider.GetUserIdAsync();
            novelModel.WriterAccountId = id!;
            novelModel.WriterName = await AuthStateProvider.GetAuthUsernameAsync();

            if (coverImage is not null)
            {
                var imageUrl = await NovelService.UploadCoverImageAsync(coverImage!);
                novelModel.CoverImageUrl = imageUrl;
            }
            
            var result = await NovelService.UpdateNovelAsync(novelModel, NovelId);

            if (result)
            {
                Snackbar.Add("¡Novela actualizada exitosamente! Ahora puedes compartir tu historia con todos los lectores.",
                Severity.Success);
                NavigationManager.NavigateTo("/settings/publications");
            }
            else
            {
                Snackbar.Add("No se pudo actualizar la novela. Por favor, intenta nuevamente más tarde.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al crear la novela: " + ex.Message);
            Snackbar.Add("Lo sentimos, ocurrio un error con el servidor, por favor intentelo más tarde", Severity.Error);
        }

    }

    private bool isModelCorrect()
    {

        if (!HasChanges()){
            Snackbar.Add("Debe realizar algún cambio para poder actualizar la novela.");
            return false;
        }

        if (novelModel.Tags.Count <= 0 || novelModel.Genres.Count <= 0)
        {
            Snackbar.Add("Debe seleccionar por lo menos un género y un tag.");
            return false;
        }

        return true;
    }

    private bool HasChanges()
    {

        if (!string.Equals(novelModel.Title, _originalModel.Title))
            return true;

        if (!string.Equals(novelModel.Description, _originalModel.Description))
            return true; 

        if (!Enumerable.SequenceEqual(novelModel.Tags.OrderBy(x => x), _originalModel.Tags.OrderBy(x => x)))
            return true; 

        if (!Enumerable.SequenceEqual(novelModel.Genres.OrderBy(x => x), _originalModel.Genres.OrderBy(x => x)))
            return true; 

        if (!string.Equals(imagePreviewUrl, _originalModel.CoverImageUrl))
            return true; 

        return false;
    }
}