@inject ISnackbar Snackbar
@inject INovelService NovelService
@inject MythosAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@page "/novel/{NovelId}"

<PageTitle>Capítulo</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <div style="position: absolute;">
        <IconBackButton />
    </div>
    <!-- Novel Title -->
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2" Style="font-weight: 700;">
        @novel.Title
    </MudText>

    <!-- Custom Tabs -->
    <div class="custom-tabs mb-6">
        <div class="tab-container">
            <button class="tab-button @(activeTab == 0 ? "active" : "")" @onclick="() => SetActiveTab(0)">
                Información
            </button>
            <button class="tab-button @(activeTab == 1 ? "active" : "")" @onclick="() => SetActiveTab(1)">
                Capítulos
            </button>
        </div>
    </div>

    <!-- Tab Content -->
    @if (activeTab == 0)
    {
        <!-- Information Tab Content -->
        <div class="tab-content">
            <!-- Cover Image -->
            <div class="cover-container mb-6">
                <MudImage Elevation="7" Src="@novel.CoverImageUrl" Alt="@novel.Title" Style="aspect-ratio: 9/10;"
                    Class="cover-image" ObjectFit="ObjectFit.Cover" />
            </div>

            <!-- Description -->
            <div class="content-section mb-6">
                <MudText Typo="Typo.body1" Class="description-text">
                    @novel.Description
                </MudText>
            </div>

            <!-- Genres -->
            <div class="content-section mb-4">
                <MudText Typo="Typo.h6" Class="section-title mb-3">
                    Género
                </MudText>
                <div class="tags-container">
                    @foreach (var genre in novel.Genres)
                    {
                        <MudChip T="string" Text="@genre" Color="Color.Dark" />
                    }
                </div>
            </div>

            <!-- Tags -->
            <div class="content-section mb-4">
                <MudText Typo="Typo.h6" Class="section-title mb-3">
                    Categorías
                </MudText>
                <div class="tags-container">
                    @foreach (var tag in novel.Tags)
                    {
                        <MudChip T="string" Text="@tag" Color="Color.Dark" Variant="Variant.Text" />
                    }
                </div>
            </div>

            <!-- Last Updated -->
            <div class="content-section">
                <MudText Typo="Typo.body2" Color="Color.Warning">
                    Actualizado: @novel.UpdatedAt.ToString("MMMM dd, yyyy")
                </MudText>
            </div>
        </div>
    }
    else
    {
        <!-- Chapters Tab Content -->
        <div class="tab-content">

            @if (isTheAuthor)
            {
                <div class="d-flex justify-end mb-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Dark">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                        Agregar capítulo
                    </MudButton>
                </div>
            }

            <MudCard Elevation="0">
                <MudCardContent Class="pa-0">
                    <MudList T="Chapter">
                        @foreach (var chapter in Chapters)
                        {
                            <MudListItem OnClick="@(() => NavigateToChapter(chapter.Id))" Class="chapter-item">
                                <div class="d-flex justify-space-between align-center w-100">
                                    <div>
                                        <MudText Typo="Typo.subtitle1">
                                            Chapter @chapter.Number: @chapter.Title
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @chapter.PublishedDate.ToString("MMMM dd, yyyy")
                                        </MudText>
                                    </div>
                                    <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Color="Color.Secondary" />
                                </div>
                            </MudListItem>
                            @if (chapter != Chapters.Last())
                            {
                                <MudDivider />
                            }
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </div>
    }
</MudContainer>

@code {
    [Parameter] public string NovelId { get; set; } = string.Empty;
    private bool isTheAuthor = false;
    private int activeTab = 0;
    private NovelModel novel = new NovelModel();
    private List<Chapter> Chapters = GenerateChapters();

    protected override async Task OnInitializedAsync()
    {
        await LoadNovelData();
        isTheAuthor = await AuthStateProvider.GetUserIdAsync() == novel.WriterAccountId;
    }

    private void SetActiveTab(int tabIndex)
    {
        activeTab = tabIndex;
        StateHasChanged();
    }

    private async Task LoadNovelData()
    {
        try
        {
            var result = await NovelService.GetNovelByIdAsync(NovelId);

            if (result is null)
            {
                Snackbar.Add("Lo sentimos ocurrio un error al intentar recuperar la novela, por favor intentelo más tarde",
                Severity.Error);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                novel = result;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al recuperar la novela: " + ex.Message);
            Snackbar.Add("Lo sentimos, ocurrio un error con el servidor, por favor intentelo más tarde", Severity.Error);
        }
    }

    private static List<Chapter> GenerateChapters()
    {
        var chapters = new List<Chapter>();
        var titles = new[]
        {
"The Awakening", "Shadows of the Past", "The Rogue Knight",
"Ancient Prophecies", "The Mischievous Sprite", "Secrets Unveiled",
"The Wise Old Sage", "Journey into Darkness", "Mythical Creatures", "Inner Demons"
};

        for (int i = 0; i < titles.Length; i++)
        {
            chapters.Add(new Chapter
            {
                Id = i + 1,
                Number = i + 1,
                Title = titles[i],
                PublishedDate = new DateTime(2024, 6, 1).AddDays(i * 3)
            });
        }
        return chapters;
    }

    private void NavigateToChapter(int chapterId)
    {
        Console.WriteLine($"Navigating to chapter {chapterId}");
    }

    public class Chapter
    {
        public int Id { get; set; }
        public int Number { get; set; }
        public string Title { get; set; } = string.Empty;
        public DateTime PublishedDate { get; set; }
    }
}
