@using mythos_frontend_dotnet.Pages.Novels.Components

@inject INovelService NovelService
@inject ISnackbar Snackbar

@page "/"

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
	<MudText Typo="Typo.h4" Class="mb-4" Style="font-weight: bold;">Obras Publicadas</MudText>

	<!-- Search Bar -->
	<MudTextField @bind-Value="searchText" TextChanged="@OnSearchTextChanges" Placeholder="Buscar obras publicadas"
		Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Class="mb-4"
		FullWidth="true" Margin="Margin.Dense" Clearable="true" />

	<!-- Novelas Section -->
	<MudText Typo="Typo.h5" Class="mb-4" Style="font-weight: bold;">Novelas</MudText>
	<MudGrid Class="mb-8">
		@foreach (var novel in filteredNovels)
		{
			<MudItem xs="12" sm="6" md="3">
				<NovelCard Novel="novel" />
			</MudItem>
		}
	</MudGrid>
</MudContainer>



@code {
	private string searchText = "";
	private List<NovelModel> novels = [];
	private List<NovelModel> filteredNovels = [];

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var result = await NovelService.GetNovelsAsync();

			if (result is null)
			{
				Snackbar.Add("Lo sentimos, ocurrio un error al recuperar las novelas, por favor intentelo más tarde", Severity.Error);
			}
			else
			{
				novels = result;
				filteredNovels = result;
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine("Error al recuperar en la página principal: " + ex.Message);
			Snackbar.Add("Lo sentimos, ocurrio un error con el servidor, por favor intentelo más tarde", Severity.Error);
		}
	}

	private async Task OnSearchTextChanges(string value)
	{
		searchText = value;
		SearchNovels();
	}

	private void SearchNovels()
	{
		Console.WriteLine("Hello");
		if (string.IsNullOrWhiteSpace(searchText))
		{
			filteredNovels = novels;
		}
		else
		{
			var lower = searchText.Trim().ToLower();
			filteredNovels = novels
			.Where(n => n.Title.ToLower().Contains(lower)).ToList();
		}
	}
}
